version: "2.1"

executors:
  # `main` uses the `circleci/python:3.7.3` docker image with a checkout of the sunrise code
  primary:
    docker:
      - image: circleci/python:3.7-stretch-node
        environment:
          APP_DEBUG: "True"
          APP_PORT: 8000
          APP_SECRET_KEY: "ba379e85c2426e6b0c0e3dc305e563bfec392af98898dae8256591f9d2751af7a6fc24c8b9dc540644e5d6fca9b5317dad3c9d035e3ff1ec1361223101ba4f48"
          ALLOWED_HOSTS: "localhost"
  primary_with_postgres:
    docker:
      - image: circleci/python:3.7-stretch-node
        environment:
          APP_DEBUG: "True"
          APP_PORT: 8000
          APP_SECRET_KEY: "ba379e85c2426e6b0c0e3dc305e563bfec392af98898dae8256591f9d2751af7a6fc24c8b9dc540644e5d6fca9b5317dad3c9d035e3ff1ec1361223101ba4f48"
          DB_NAME: sunrise
          DB_USER: sunrise
          DB_PASSWORD: password
      - image: postgres:10
        environment:
          POSTGRES_DB: sunrise
          POSTGRES_USER: sunrise
          POSTGRES_PASSWORD: password

jobs:

  # `deps` is used for cache python dependencies.
  deps:
    executor: primary
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install
      - save_cache:
          key: deps-{{ .Branch }}-{{ .Revision }}
          paths:
            - "/home/circleci/.local/share/virtualenvs/"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"

  # `pre_commit` is used to run pre-commit.
  pre_commit:
    executor: primary
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: sudo pip install pre-commit
      - run: pre-commit run --all-files
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

  # `migrations` is used for testing migrations.
  migrations:
    executor: primary_with_postgres
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run: pipenv run python manage.py migrate

  # `unit_tests` is used for running server unit tests, which don't require a database.
  unit_tests:
    executor: primary
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run: pipenv run python -m unittest -v sunrise.tests

  # `acc_staging` is used for running acceptance tests against the staging environment.
  acc_staging:
    executor: primary
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run: make bin_linux/chamber
      - run:
          name: Run Acceptance Tests
          command: bin_linux/chamber exec sunrise-staging -- pipenv run python -m unittest -v sunrise.tests

  # `acc_prod` is used for running acceptance tests against the production environment.
  acc_prod:
    executor: primary
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run: make bin_linux/chamber
      - run:
          name: Run Acceptance Tests
          command: bin_linux/chamber exec sunrise-prod -- pipenv run python -m unittest -v sunrise.tests

  # `server_tests` is used for running server tests, which test Django models.
  server_tests:
    executor: primary_with_postgres
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run: pipenv run python manage.py test

  # `e2e_tests` runs end-to-end JavaScript tests using Cypress.  https://www.cypress.io/
  # Cypress dependencies found at https://github.com/cypress-io/cypress-docker-images/blob/master/base/10/Dockerfile.
  e2e_tests:
    executor: primary_with_postgres
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Install Cypress Dependencies
          command: |
            sudo apt-get update && \
            sudo apt-get install -y \
              libgtk2.0-0 \
              libnotify-dev \
              libgconf-2-4 \
              libnss3 \
              libxss1 \
              libasound2 \
              xvfb
      - run:
          name: Node Version
          command: node -v
      - run:
          name: NPM Version
          command: npm -v
      - run:
          name: Python Version
          command: pipenv run python --version
      - run:
          name: Start Server
          command: pipenv run python manage.py runserver 0.0.0.0:$APP_PORT
          background: true
      - run: sleep 5
      - run:
          name: Install Mocha
          command: npm install --save-dev mocha mocha-multi-reporters mocha-junit-reporter
      - run:
          name: Install Cypress
          command: npm install --save-dev cypress
      - run: CYPRESS_baseUrl=http://localhost:$APP_PORT $(npm bin)/cypress verify
      - run: CYPRESS_baseUrl=http://localhost:$APP_PORT $(npm bin)/cypress run
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - store_test_results:
          path: cypress/results
          destination: results

  # `build` builds the application container and pushes to the container repository
  build:
    executor: primary
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Download Chamber
          command: make bin_linux/chamber
      - run:
          name: "Download RDS Certificates"
          command: make rds-combined-ca-bundle.pem
      - run:
          name: Build Docker Image
          command: make build_gunicorn
      - run:
          name: Push Docker Image
          command: |
            if [ "${AWS_ACCESS_KEY_ID}" != "" ]; then
              bash scripts/ecr_push.sh "sunrise:web" "${AWS_ECR_REPO}" "git-${CIRCLE_SHA1}"
            fi

  # `migrate_staging` migrate the staging database.
  migrate_staging:
    executor: primary
    steps:
      - checkout
      - run: exit 1

  # `deploy_staging` deploys the container to the staging environment.
  deploy_staging:
    executor: primary
    steps:
      - checkout
      - run: exit 1

  # `deploy_prod` deploys the container to the staging environment.
  deploy_prod:
    executor: primary
    steps:
      - checkout
      - run: exit 1

workflows:
  version: 2
  main:
    jobs:
      - deps
      - pre_commit:
          requires:
            - deps
      - migrations:
          requires:
            - pre_commit
      - unit_tests:
          requires:
            - pre_commit
      - acc_staging:
          requires:
            - pre_commit
      - acc_prod:
          requires:
            - pre_commit
      - server_tests:
          requires:
            - unit_tests
      - e2e_tests:
          requires:
            - server_tests
      - build:
          requires:
            - server_tests
      - migrate_staging:
          requires:
            - build
      - deploy_staging:
          requires:
            - migrate_staging
      - approve_prod_deploy:
          type: approval
          requires:
            - deploy_staging
